// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: jarvis.proto

package agent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Jarvis_Connect_FullMethodName    = "/jarvis.v1.Jarvis/Connect"
	Jarvis_RunCommand_FullMethodName = "/jarvis.v1.Jarvis/RunCommand"
)

// JarvisClient is the client API for Jarvis service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JarvisClient interface {
	Connect(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Request, Response], error)
	RunCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResult, error)
}

type jarvisClient struct {
	cc grpc.ClientConnInterface
}

func NewJarvisClient(cc grpc.ClientConnInterface) JarvisClient {
	return &jarvisClient{cc}
}

func (c *jarvisClient) Connect(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Request, Response], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Jarvis_ServiceDesc.Streams[0], Jarvis_Connect_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Request, Response]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Jarvis_ConnectClient = grpc.BidiStreamingClient[Request, Response]

func (c *jarvisClient) RunCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommandResult)
	err := c.cc.Invoke(ctx, Jarvis_RunCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JarvisServer is the server API for Jarvis service.
// All implementations must embed UnimplementedJarvisServer
// for forward compatibility.
type JarvisServer interface {
	Connect(grpc.BidiStreamingServer[Request, Response]) error
	RunCommand(context.Context, *CommandRequest) (*CommandResult, error)
	mustEmbedUnimplementedJarvisServer()
}

// UnimplementedJarvisServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedJarvisServer struct{}

func (UnimplementedJarvisServer) Connect(grpc.BidiStreamingServer[Request, Response]) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedJarvisServer) RunCommand(context.Context, *CommandRequest) (*CommandResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunCommand not implemented")
}
func (UnimplementedJarvisServer) mustEmbedUnimplementedJarvisServer() {}
func (UnimplementedJarvisServer) testEmbeddedByValue()                {}

// UnsafeJarvisServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JarvisServer will
// result in compilation errors.
type UnsafeJarvisServer interface {
	mustEmbedUnimplementedJarvisServer()
}

func RegisterJarvisServer(s grpc.ServiceRegistrar, srv JarvisServer) {
	// If the following call pancis, it indicates UnimplementedJarvisServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Jarvis_ServiceDesc, srv)
}

func _Jarvis_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JarvisServer).Connect(&grpc.GenericServerStream[Request, Response]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Jarvis_ConnectServer = grpc.BidiStreamingServer[Request, Response]

func _Jarvis_RunCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JarvisServer).RunCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Jarvis_RunCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JarvisServer).RunCommand(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Jarvis_ServiceDesc is the grpc.ServiceDesc for Jarvis service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Jarvis_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jarvis.v1.Jarvis",
	HandlerType: (*JarvisServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunCommand",
			Handler:    _Jarvis_RunCommand_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _Jarvis_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "jarvis.proto",
}
